// Code generated by go-swagger; DO NOT EDIT.

package kbmodel

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Credit credit
// swagger:model Credit
type Credit struct {

	// account Id
	// Required: true
	AccountID *strfmt.UUID `json:"accountId"`

	// audit logs
	AuditLogs []*AuditLog `json:"auditLogs"`

	// credit amount
	// Required: true
	CreditAmount *float64 `json:"creditAmount"`

	// credit Id
	CreditID strfmt.UUID `json:"creditId,omitempty"`

	// currency
	Currency string `json:"currency,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// effective date
	EffectiveDate strfmt.Date `json:"effectiveDate,omitempty"`

	// invoice Id
	InvoiceID strfmt.UUID `json:"invoiceId,omitempty"`

	// invoice number
	InvoiceNumber string `json:"invoiceNumber,omitempty"`

	// item details
	ItemDetails string `json:"itemDetails,omitempty"`
}

// Validate validates this credit
func (m *Credit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAuditLogs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreditAmount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreditID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEffectiveDate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInvoiceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Credit) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("accountId", "body", m.AccountID); err != nil {
		return err
	}

	if err := validate.FormatOf("accountId", "body", "uuid", m.AccountID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Credit) validateAuditLogs(formats strfmt.Registry) error {

	if swag.IsZero(m.AuditLogs) { // not required
		return nil
	}

	for i := 0; i < len(m.AuditLogs); i++ {

		if swag.IsZero(m.AuditLogs[i]) { // not required
			continue
		}

		if m.AuditLogs[i] != nil {

			if err := m.AuditLogs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("auditLogs" + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *Credit) validateCreditAmount(formats strfmt.Registry) error {

	if err := validate.Required("creditAmount", "body", m.CreditAmount); err != nil {
		return err
	}

	return nil
}

func (m *Credit) validateCreditID(formats strfmt.Registry) error {

	if swag.IsZero(m.CreditID) { // not required
		return nil
	}

	if err := validate.FormatOf("creditId", "body", "uuid", m.CreditID.String(), formats); err != nil {
		return err
	}

	return nil
}

var creditTypeCurrencyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AED","AFN","ALL","AMD","ANG","AOA","ARS","AUD","AWG","AZN","BAM","BBD","BDT","BGN","BHD","BIF","BMD","BND","BOB","BRL","BSD","BTN","BWP","BYR","BZD","CAD","CDF","CHF","CLP","CNY","COP","CRC","CUC","CUP","CVE","CZK","DJF","DKK","DOP","DZD","EGP","ERN","ETB","EUR","FJD","FKP","GBP","GEL","GGP","GHS","GIP","GMD","GNF","GTQ","GYD","HKD","HNL","HRK","HTG","HUF","IDR","ILS","IMP","INR","IQD","IRR","ISK","JEP","JMD","JOD","JPY","KES","KGS","KHR","KMF","KPW","KRW","KWD","KYD","KZT","LAK","LBP","LKR","LRD","LSL","LTL","LVL","LYD","MAD","MDL","MGA","MKD","MMK","MNT","MOP","MRO","MUR","MVR","MWK","MXN","MYR","MZN","NAD","NGN","NIO","NOK","NPR","NZD","OMR","PAB","PEN","PGK","PHP","PKR","PLN","PYG","QAR","RON","RSD","RUB","RWF","SAR","SBD","SCR","SDG","SEK","SGD","SHP","SLL","SOS","SPL","SRD","STD","SVC","SYP","SZL","THB","TJS","TMT","TND","TOP","TRY","TTD","TVD","TWD","TZS","UAH","UGX","USD","UYU","UZS","VEF","VND","VUV","WST","XAF","XCD","XDR","XOF","XPF","YER","ZAR","ZMW","ZWD","BTC"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		creditTypeCurrencyPropEnum = append(creditTypeCurrencyPropEnum, v)
	}
}

const (

	// CreditCurrencyAED captures enum value "AED"
	CreditCurrencyAED string = "AED"

	// CreditCurrencyAFN captures enum value "AFN"
	CreditCurrencyAFN string = "AFN"

	// CreditCurrencyALL captures enum value "ALL"
	CreditCurrencyALL string = "ALL"

	// CreditCurrencyAMD captures enum value "AMD"
	CreditCurrencyAMD string = "AMD"

	// CreditCurrencyANG captures enum value "ANG"
	CreditCurrencyANG string = "ANG"

	// CreditCurrencyAOA captures enum value "AOA"
	CreditCurrencyAOA string = "AOA"

	// CreditCurrencyARS captures enum value "ARS"
	CreditCurrencyARS string = "ARS"

	// CreditCurrencyAUD captures enum value "AUD"
	CreditCurrencyAUD string = "AUD"

	// CreditCurrencyAWG captures enum value "AWG"
	CreditCurrencyAWG string = "AWG"

	// CreditCurrencyAZN captures enum value "AZN"
	CreditCurrencyAZN string = "AZN"

	// CreditCurrencyBAM captures enum value "BAM"
	CreditCurrencyBAM string = "BAM"

	// CreditCurrencyBBD captures enum value "BBD"
	CreditCurrencyBBD string = "BBD"

	// CreditCurrencyBDT captures enum value "BDT"
	CreditCurrencyBDT string = "BDT"

	// CreditCurrencyBGN captures enum value "BGN"
	CreditCurrencyBGN string = "BGN"

	// CreditCurrencyBHD captures enum value "BHD"
	CreditCurrencyBHD string = "BHD"

	// CreditCurrencyBIF captures enum value "BIF"
	CreditCurrencyBIF string = "BIF"

	// CreditCurrencyBMD captures enum value "BMD"
	CreditCurrencyBMD string = "BMD"

	// CreditCurrencyBND captures enum value "BND"
	CreditCurrencyBND string = "BND"

	// CreditCurrencyBOB captures enum value "BOB"
	CreditCurrencyBOB string = "BOB"

	// CreditCurrencyBRL captures enum value "BRL"
	CreditCurrencyBRL string = "BRL"

	// CreditCurrencyBSD captures enum value "BSD"
	CreditCurrencyBSD string = "BSD"

	// CreditCurrencyBTN captures enum value "BTN"
	CreditCurrencyBTN string = "BTN"

	// CreditCurrencyBWP captures enum value "BWP"
	CreditCurrencyBWP string = "BWP"

	// CreditCurrencyBYR captures enum value "BYR"
	CreditCurrencyBYR string = "BYR"

	// CreditCurrencyBZD captures enum value "BZD"
	CreditCurrencyBZD string = "BZD"

	// CreditCurrencyCAD captures enum value "CAD"
	CreditCurrencyCAD string = "CAD"

	// CreditCurrencyCDF captures enum value "CDF"
	CreditCurrencyCDF string = "CDF"

	// CreditCurrencyCHF captures enum value "CHF"
	CreditCurrencyCHF string = "CHF"

	// CreditCurrencyCLP captures enum value "CLP"
	CreditCurrencyCLP string = "CLP"

	// CreditCurrencyCNY captures enum value "CNY"
	CreditCurrencyCNY string = "CNY"

	// CreditCurrencyCOP captures enum value "COP"
	CreditCurrencyCOP string = "COP"

	// CreditCurrencyCRC captures enum value "CRC"
	CreditCurrencyCRC string = "CRC"

	// CreditCurrencyCUC captures enum value "CUC"
	CreditCurrencyCUC string = "CUC"

	// CreditCurrencyCUP captures enum value "CUP"
	CreditCurrencyCUP string = "CUP"

	// CreditCurrencyCVE captures enum value "CVE"
	CreditCurrencyCVE string = "CVE"

	// CreditCurrencyCZK captures enum value "CZK"
	CreditCurrencyCZK string = "CZK"

	// CreditCurrencyDJF captures enum value "DJF"
	CreditCurrencyDJF string = "DJF"

	// CreditCurrencyDKK captures enum value "DKK"
	CreditCurrencyDKK string = "DKK"

	// CreditCurrencyDOP captures enum value "DOP"
	CreditCurrencyDOP string = "DOP"

	// CreditCurrencyDZD captures enum value "DZD"
	CreditCurrencyDZD string = "DZD"

	// CreditCurrencyEGP captures enum value "EGP"
	CreditCurrencyEGP string = "EGP"

	// CreditCurrencyERN captures enum value "ERN"
	CreditCurrencyERN string = "ERN"

	// CreditCurrencyETB captures enum value "ETB"
	CreditCurrencyETB string = "ETB"

	// CreditCurrencyEUR captures enum value "EUR"
	CreditCurrencyEUR string = "EUR"

	// CreditCurrencyFJD captures enum value "FJD"
	CreditCurrencyFJD string = "FJD"

	// CreditCurrencyFKP captures enum value "FKP"
	CreditCurrencyFKP string = "FKP"

	// CreditCurrencyGBP captures enum value "GBP"
	CreditCurrencyGBP string = "GBP"

	// CreditCurrencyGEL captures enum value "GEL"
	CreditCurrencyGEL string = "GEL"

	// CreditCurrencyGGP captures enum value "GGP"
	CreditCurrencyGGP string = "GGP"

	// CreditCurrencyGHS captures enum value "GHS"
	CreditCurrencyGHS string = "GHS"

	// CreditCurrencyGIP captures enum value "GIP"
	CreditCurrencyGIP string = "GIP"

	// CreditCurrencyGMD captures enum value "GMD"
	CreditCurrencyGMD string = "GMD"

	// CreditCurrencyGNF captures enum value "GNF"
	CreditCurrencyGNF string = "GNF"

	// CreditCurrencyGTQ captures enum value "GTQ"
	CreditCurrencyGTQ string = "GTQ"

	// CreditCurrencyGYD captures enum value "GYD"
	CreditCurrencyGYD string = "GYD"

	// CreditCurrencyHKD captures enum value "HKD"
	CreditCurrencyHKD string = "HKD"

	// CreditCurrencyHNL captures enum value "HNL"
	CreditCurrencyHNL string = "HNL"

	// CreditCurrencyHRK captures enum value "HRK"
	CreditCurrencyHRK string = "HRK"

	// CreditCurrencyHTG captures enum value "HTG"
	CreditCurrencyHTG string = "HTG"

	// CreditCurrencyHUF captures enum value "HUF"
	CreditCurrencyHUF string = "HUF"

	// CreditCurrencyIDR captures enum value "IDR"
	CreditCurrencyIDR string = "IDR"

	// CreditCurrencyILS captures enum value "ILS"
	CreditCurrencyILS string = "ILS"

	// CreditCurrencyIMP captures enum value "IMP"
	CreditCurrencyIMP string = "IMP"

	// CreditCurrencyINR captures enum value "INR"
	CreditCurrencyINR string = "INR"

	// CreditCurrencyIQD captures enum value "IQD"
	CreditCurrencyIQD string = "IQD"

	// CreditCurrencyIRR captures enum value "IRR"
	CreditCurrencyIRR string = "IRR"

	// CreditCurrencyISK captures enum value "ISK"
	CreditCurrencyISK string = "ISK"

	// CreditCurrencyJEP captures enum value "JEP"
	CreditCurrencyJEP string = "JEP"

	// CreditCurrencyJMD captures enum value "JMD"
	CreditCurrencyJMD string = "JMD"

	// CreditCurrencyJOD captures enum value "JOD"
	CreditCurrencyJOD string = "JOD"

	// CreditCurrencyJPY captures enum value "JPY"
	CreditCurrencyJPY string = "JPY"

	// CreditCurrencyKES captures enum value "KES"
	CreditCurrencyKES string = "KES"

	// CreditCurrencyKGS captures enum value "KGS"
	CreditCurrencyKGS string = "KGS"

	// CreditCurrencyKHR captures enum value "KHR"
	CreditCurrencyKHR string = "KHR"

	// CreditCurrencyKMF captures enum value "KMF"
	CreditCurrencyKMF string = "KMF"

	// CreditCurrencyKPW captures enum value "KPW"
	CreditCurrencyKPW string = "KPW"

	// CreditCurrencyKRW captures enum value "KRW"
	CreditCurrencyKRW string = "KRW"

	// CreditCurrencyKWD captures enum value "KWD"
	CreditCurrencyKWD string = "KWD"

	// CreditCurrencyKYD captures enum value "KYD"
	CreditCurrencyKYD string = "KYD"

	// CreditCurrencyKZT captures enum value "KZT"
	CreditCurrencyKZT string = "KZT"

	// CreditCurrencyLAK captures enum value "LAK"
	CreditCurrencyLAK string = "LAK"

	// CreditCurrencyLBP captures enum value "LBP"
	CreditCurrencyLBP string = "LBP"

	// CreditCurrencyLKR captures enum value "LKR"
	CreditCurrencyLKR string = "LKR"

	// CreditCurrencyLRD captures enum value "LRD"
	CreditCurrencyLRD string = "LRD"

	// CreditCurrencyLSL captures enum value "LSL"
	CreditCurrencyLSL string = "LSL"

	// CreditCurrencyLTL captures enum value "LTL"
	CreditCurrencyLTL string = "LTL"

	// CreditCurrencyLVL captures enum value "LVL"
	CreditCurrencyLVL string = "LVL"

	// CreditCurrencyLYD captures enum value "LYD"
	CreditCurrencyLYD string = "LYD"

	// CreditCurrencyMAD captures enum value "MAD"
	CreditCurrencyMAD string = "MAD"

	// CreditCurrencyMDL captures enum value "MDL"
	CreditCurrencyMDL string = "MDL"

	// CreditCurrencyMGA captures enum value "MGA"
	CreditCurrencyMGA string = "MGA"

	// CreditCurrencyMKD captures enum value "MKD"
	CreditCurrencyMKD string = "MKD"

	// CreditCurrencyMMK captures enum value "MMK"
	CreditCurrencyMMK string = "MMK"

	// CreditCurrencyMNT captures enum value "MNT"
	CreditCurrencyMNT string = "MNT"

	// CreditCurrencyMOP captures enum value "MOP"
	CreditCurrencyMOP string = "MOP"

	// CreditCurrencyMRO captures enum value "MRO"
	CreditCurrencyMRO string = "MRO"

	// CreditCurrencyMUR captures enum value "MUR"
	CreditCurrencyMUR string = "MUR"

	// CreditCurrencyMVR captures enum value "MVR"
	CreditCurrencyMVR string = "MVR"

	// CreditCurrencyMWK captures enum value "MWK"
	CreditCurrencyMWK string = "MWK"

	// CreditCurrencyMXN captures enum value "MXN"
	CreditCurrencyMXN string = "MXN"

	// CreditCurrencyMYR captures enum value "MYR"
	CreditCurrencyMYR string = "MYR"

	// CreditCurrencyMZN captures enum value "MZN"
	CreditCurrencyMZN string = "MZN"

	// CreditCurrencyNAD captures enum value "NAD"
	CreditCurrencyNAD string = "NAD"

	// CreditCurrencyNGN captures enum value "NGN"
	CreditCurrencyNGN string = "NGN"

	// CreditCurrencyNIO captures enum value "NIO"
	CreditCurrencyNIO string = "NIO"

	// CreditCurrencyNOK captures enum value "NOK"
	CreditCurrencyNOK string = "NOK"

	// CreditCurrencyNPR captures enum value "NPR"
	CreditCurrencyNPR string = "NPR"

	// CreditCurrencyNZD captures enum value "NZD"
	CreditCurrencyNZD string = "NZD"

	// CreditCurrencyOMR captures enum value "OMR"
	CreditCurrencyOMR string = "OMR"

	// CreditCurrencyPAB captures enum value "PAB"
	CreditCurrencyPAB string = "PAB"

	// CreditCurrencyPEN captures enum value "PEN"
	CreditCurrencyPEN string = "PEN"

	// CreditCurrencyPGK captures enum value "PGK"
	CreditCurrencyPGK string = "PGK"

	// CreditCurrencyPHP captures enum value "PHP"
	CreditCurrencyPHP string = "PHP"

	// CreditCurrencyPKR captures enum value "PKR"
	CreditCurrencyPKR string = "PKR"

	// CreditCurrencyPLN captures enum value "PLN"
	CreditCurrencyPLN string = "PLN"

	// CreditCurrencyPYG captures enum value "PYG"
	CreditCurrencyPYG string = "PYG"

	// CreditCurrencyQAR captures enum value "QAR"
	CreditCurrencyQAR string = "QAR"

	// CreditCurrencyRON captures enum value "RON"
	CreditCurrencyRON string = "RON"

	// CreditCurrencyRSD captures enum value "RSD"
	CreditCurrencyRSD string = "RSD"

	// CreditCurrencyRUB captures enum value "RUB"
	CreditCurrencyRUB string = "RUB"

	// CreditCurrencyRWF captures enum value "RWF"
	CreditCurrencyRWF string = "RWF"

	// CreditCurrencySAR captures enum value "SAR"
	CreditCurrencySAR string = "SAR"

	// CreditCurrencySBD captures enum value "SBD"
	CreditCurrencySBD string = "SBD"

	// CreditCurrencySCR captures enum value "SCR"
	CreditCurrencySCR string = "SCR"

	// CreditCurrencySDG captures enum value "SDG"
	CreditCurrencySDG string = "SDG"

	// CreditCurrencySEK captures enum value "SEK"
	CreditCurrencySEK string = "SEK"

	// CreditCurrencySGD captures enum value "SGD"
	CreditCurrencySGD string = "SGD"

	// CreditCurrencySHP captures enum value "SHP"
	CreditCurrencySHP string = "SHP"

	// CreditCurrencySLL captures enum value "SLL"
	CreditCurrencySLL string = "SLL"

	// CreditCurrencySOS captures enum value "SOS"
	CreditCurrencySOS string = "SOS"

	// CreditCurrencySPL captures enum value "SPL"
	CreditCurrencySPL string = "SPL"

	// CreditCurrencySRD captures enum value "SRD"
	CreditCurrencySRD string = "SRD"

	// CreditCurrencySTD captures enum value "STD"
	CreditCurrencySTD string = "STD"

	// CreditCurrencySVC captures enum value "SVC"
	CreditCurrencySVC string = "SVC"

	// CreditCurrencySYP captures enum value "SYP"
	CreditCurrencySYP string = "SYP"

	// CreditCurrencySZL captures enum value "SZL"
	CreditCurrencySZL string = "SZL"

	// CreditCurrencyTHB captures enum value "THB"
	CreditCurrencyTHB string = "THB"

	// CreditCurrencyTJS captures enum value "TJS"
	CreditCurrencyTJS string = "TJS"

	// CreditCurrencyTMT captures enum value "TMT"
	CreditCurrencyTMT string = "TMT"

	// CreditCurrencyTND captures enum value "TND"
	CreditCurrencyTND string = "TND"

	// CreditCurrencyTOP captures enum value "TOP"
	CreditCurrencyTOP string = "TOP"

	// CreditCurrencyTRY captures enum value "TRY"
	CreditCurrencyTRY string = "TRY"

	// CreditCurrencyTTD captures enum value "TTD"
	CreditCurrencyTTD string = "TTD"

	// CreditCurrencyTVD captures enum value "TVD"
	CreditCurrencyTVD string = "TVD"

	// CreditCurrencyTWD captures enum value "TWD"
	CreditCurrencyTWD string = "TWD"

	// CreditCurrencyTZS captures enum value "TZS"
	CreditCurrencyTZS string = "TZS"

	// CreditCurrencyUAH captures enum value "UAH"
	CreditCurrencyUAH string = "UAH"

	// CreditCurrencyUGX captures enum value "UGX"
	CreditCurrencyUGX string = "UGX"

	// CreditCurrencyUSD captures enum value "USD"
	CreditCurrencyUSD string = "USD"

	// CreditCurrencyUYU captures enum value "UYU"
	CreditCurrencyUYU string = "UYU"

	// CreditCurrencyUZS captures enum value "UZS"
	CreditCurrencyUZS string = "UZS"

	// CreditCurrencyVEF captures enum value "VEF"
	CreditCurrencyVEF string = "VEF"

	// CreditCurrencyVND captures enum value "VND"
	CreditCurrencyVND string = "VND"

	// CreditCurrencyVUV captures enum value "VUV"
	CreditCurrencyVUV string = "VUV"

	// CreditCurrencyWST captures enum value "WST"
	CreditCurrencyWST string = "WST"

	// CreditCurrencyXAF captures enum value "XAF"
	CreditCurrencyXAF string = "XAF"

	// CreditCurrencyXCD captures enum value "XCD"
	CreditCurrencyXCD string = "XCD"

	// CreditCurrencyXDR captures enum value "XDR"
	CreditCurrencyXDR string = "XDR"

	// CreditCurrencyXOF captures enum value "XOF"
	CreditCurrencyXOF string = "XOF"

	// CreditCurrencyXPF captures enum value "XPF"
	CreditCurrencyXPF string = "XPF"

	// CreditCurrencyYER captures enum value "YER"
	CreditCurrencyYER string = "YER"

	// CreditCurrencyZAR captures enum value "ZAR"
	CreditCurrencyZAR string = "ZAR"

	// CreditCurrencyZMW captures enum value "ZMW"
	CreditCurrencyZMW string = "ZMW"

	// CreditCurrencyZWD captures enum value "ZWD"
	CreditCurrencyZWD string = "ZWD"

	// CreditCurrencyBTC captures enum value "BTC"
	CreditCurrencyBTC string = "BTC"
)

// prop value enum
func (m *Credit) validateCurrencyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, creditTypeCurrencyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Credit) validateCurrency(formats strfmt.Registry) error {

	if swag.IsZero(m.Currency) { // not required
		return nil
	}

	// value enum
	if err := m.validateCurrencyEnum("currency", "body", m.Currency); err != nil {
		return err
	}

	return nil
}

func (m *Credit) validateEffectiveDate(formats strfmt.Registry) error {

	if swag.IsZero(m.EffectiveDate) { // not required
		return nil
	}

	if err := validate.FormatOf("effectiveDate", "body", "date", m.EffectiveDate.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *Credit) validateInvoiceID(formats strfmt.Registry) error {

	if swag.IsZero(m.InvoiceID) { // not required
		return nil
	}

	if err := validate.FormatOf("invoiceId", "body", "uuid", m.InvoiceID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Credit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Credit) UnmarshalBinary(b []byte) error {
	var res Credit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
